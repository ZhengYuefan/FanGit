{
  "uid" : "d60e1ad13b9c0181",
  "name" : "运动成绩",
  "fullName" : "TestCase.test_08_sports#test_sports_result",
  "historyId" : "2fb7dfa8dc9651ff9696a35f7ecc0b24",
  "time" : {
    "start" : 1640248509775,
    "stop" : 1640248509862,
    "duration" : 87
  },
  "description" : "运动结束，运动成绩页面",
  "descriptionHtml" : "<p>运动结束，运动成绩页面</p>\n",
  "status" : "broken",
  "statusMessage" : "KeyError: 'realName'",
  "statusTrace" : "sportsResult_args = {'expect': {'msg': '成功', 'realName': 'None'}, 'name': '运动成绩', 'request': {'body': {'recordId': 52374}, 'headers': {'Authorization': 'MTg1ZmRmYTEtN2NhYS00NDY2LWJkOTgtZWEwNzg1ZmIzM2Yw'}, 'method': 'get', 'url': '/v1/sports/getSportsResult'}}\n\n    @allure.feature('运动模块')\n    @allure.story('运动成绩')\n    @pytest.mark.sport\n    @pytest.mark.parametrize(\"sportsResult_args\", sportsResult_args)\n    def test_sports_result(sportsResult_args):\n        \"\"\"运动结束，运动成绩页面\"\"\"\n        allure.dynamic.title(sportsResult_args['name'])\n        with allure.step('发送请求'):\n            url = read_config_yaml()['appHost'] + sportsResult_args['request']['url']\n            method = sportsResult_args['request']['method']\n            headers = sportsResult_args['request']['headers']\n            headers['Authorization'] = read_extract_yaml()['teacher_token']\n            body = sportsResult_args['request']['body']\n            body['recordId'] = read_extract_yaml()['sport_record_id']\n            lg.info(\"获取的接口请求参数：%s\" % sportsResult_args)\n            allure.attach(json.dumps(sportsResult_args, sort_keys=True, indent=4, separators=(',', ';'), ensure_ascii=False),\n                          name='接口请求参数')\n            res = ru.run_main(method, url, body, headers)\n            lg.info(\"返回的接口响应报文：%s\" % json.dumps(res, sort_keys=True, indent=4, separators=(',', ';'), ensure_ascii=False))\n            allure.attach(json.dumps(res, sort_keys=True, indent=4, separators=(',', ';'), ensure_ascii=False),\n                          name='接口响应报文')\n        with allure.step('断言结果'):\n            AssertUtil().assert_body(str(res['msg']), sportsResult_args['expect']['msg'])\n>           AssertUtil().assert_body(str(res['realName']), read_user_defined_variable()['name']['teacher_name'])\nE           KeyError: 'realName'\n\nTestCase\\test_08_sports.py:162: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "del_schoolName",
    "time" : {
      "start" : 1640248498057,
      "stop" : 1640248498073,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "my_fixture",
    "time" : {
      "start" : 1640248509766,
      "stop" : 1640248509774,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "运动结束，运动成绩页面",
    "status" : "broken",
    "statusMessage" : "KeyError: 'realName'",
    "statusTrace" : "sportsResult_args = {'expect': {'msg': '成功', 'realName': 'None'}, 'name': '运动成绩', 'request': {'body': {'recordId': 52374}, 'headers': {'Authorization': 'MTg1ZmRmYTEtN2NhYS00NDY2LWJkOTgtZWEwNzg1ZmIzM2Yw'}, 'method': 'get', 'url': '/v1/sports/getSportsResult'}}\n\n    @allure.feature('运动模块')\n    @allure.story('运动成绩')\n    @pytest.mark.sport\n    @pytest.mark.parametrize(\"sportsResult_args\", sportsResult_args)\n    def test_sports_result(sportsResult_args):\n        \"\"\"运动结束，运动成绩页面\"\"\"\n        allure.dynamic.title(sportsResult_args['name'])\n        with allure.step('发送请求'):\n            url = read_config_yaml()['appHost'] + sportsResult_args['request']['url']\n            method = sportsResult_args['request']['method']\n            headers = sportsResult_args['request']['headers']\n            headers['Authorization'] = read_extract_yaml()['teacher_token']\n            body = sportsResult_args['request']['body']\n            body['recordId'] = read_extract_yaml()['sport_record_id']\n            lg.info(\"获取的接口请求参数：%s\" % sportsResult_args)\n            allure.attach(json.dumps(sportsResult_args, sort_keys=True, indent=4, separators=(',', ';'), ensure_ascii=False),\n                          name='接口请求参数')\n            res = ru.run_main(method, url, body, headers)\n            lg.info(\"返回的接口响应报文：%s\" % json.dumps(res, sort_keys=True, indent=4, separators=(',', ';'), ensure_ascii=False))\n            allure.attach(json.dumps(res, sort_keys=True, indent=4, separators=(',', ';'), ensure_ascii=False),\n                          name='接口响应报文')\n        with allure.step('断言结果'):\n            AssertUtil().assert_body(str(res['msg']), sportsResult_args['expect']['msg'])\n>           AssertUtil().assert_body(str(res['realName']), read_user_defined_variable()['name']['teacher_name'])\nE           KeyError: 'realName'\n\nTestCase\\test_08_sports.py:162: KeyError",
    "steps" : [ {
      "name" : "发送请求",
      "time" : {
        "start" : 1640248509775,
        "stop" : 1640248509859,
        "duration" : 84
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "1d8b883919178848",
        "name" : "接口请求参数",
        "source" : "1d8b883919178848.attach",
        "type" : "text/plain",
        "size" : 358
      }, {
        "uid" : "65c534425e294854",
        "name" : "接口响应报文",
        "source" : "65c534425e294854.attach",
        "type" : "text/plain",
        "size" : 1305
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 2
    }, {
      "name" : "断言结果",
      "time" : {
        "start" : 1640248509859,
        "stop" : 1640248509862,
        "duration" : 3
      },
      "status" : "broken",
      "statusMessage" : "KeyError: 'realName'\n",
      "statusTrace" : "  File \"C:\\Users\\Administrator\\Desktop\\Physical_fitness_interface\\TestCase\\test_08_sports.py\", line 162, in test_sports_result\n    AssertUtil().assert_body(str(res['realName']), read_user_defined_variable()['name']['teacher_name'])\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "my_fixture::0",
    "time" : {
      "start" : 1640248509870,
      "stop" : 1640248509879,
      "duration" : 9
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "运动模块"
  }, {
    "name" : "story",
    "value" : "运动成绩"
  }, {
    "name" : "tag",
    "value" : "sport"
  }, {
    "name" : "parentSuite",
    "value" : "TestCase"
  }, {
    "name" : "suite",
    "value" : "test_08_sports"
  }, {
    "name" : "host",
    "value" : "DESKTOP-08CVKRT"
  }, {
    "name" : "thread",
    "value" : "21680-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCase.test_08_sports"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "sportsResult_args",
    "value" : "{'name': '运动成绩', 'request': {'method': 'get', 'url': '/v1/sports/getSportsResult', 'headers': {'Authorization': 'None'}, 'body': {'recordId': 'None'}}, 'expect': {'msg': '成功', 'realName': 'None'}}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "sport" ]
  },
  "source" : "d60e1ad13b9c0181.json",
  "parameterValues" : [ "{'name': '运动成绩', 'request': {'method': 'get', 'url': '/v1/sports/getSportsResult', 'headers': {'Authorization': 'None'}, 'body': {'recordId': 'None'}}, 'expect': {'msg': '成功', 'realName': 'None'}}" ]
}